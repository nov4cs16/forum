/*
MIT License

Copyright (c) 2020 Tailwind Labs
Copyright (c) Jonathan Reinink <jonathan@reinink.ca>
Copyright (c) Tailwind Labs, Inc.
Copyright (c) 2019-present, Yuxi (Evan) You and Vite contributors
Copyright 2013 Andrey Sitnik <andrey@sitnik.ru>
Copyright (c) 2014-present Matt Zabriskie & Collaborators
Copyright (c) Taylor Otwell
Copyright (c) Facebook, Inc. and its affiliates.
Copyright (c) Tighten Co. <hello@tighten.co>
Copyright (c) 2024 Sergio Omar Ruiz Dia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// For the full license, see LICENSE.md in the project root.

import React from 'react'

function Tests() {

  /*
    (defn tercer-angulo [angulo1 angulo2]
      (- 180 (+ angulo1 angulo2)))

    #'user/tercer-angulo
    user=> (println (tercer-angulo 60 70)) ; Debería imprimir 50
    (println (tercer-angulo 45 45)) ; Debería imprimir 90
    (println (tercer-angulo 30 60)) ; Debería imprimir 90
    ____________________________________________________________  
    user=>  (:v3 '{:v2 b, :v1 a, :v3 c})
    c
    ____________________________________________________________  
    (do (print "Nombre: ")
    (flush)
    (let [n (read)]
     (print (str "Hola "))
     n)) 
    ____________________________________________________________ 
    (if (= 3 3) ([10 20 30] 1) ([40 50 60] 1)) 
    20
    ____________________________________________________________ 
    (quote (+ 3 2)) 
    ____________________________________________________________
    '(+ 3 2) 
    ____________________________________________________________ 
    (
    (fn fact[n]
      (if
    (zero ? n)
    1
      (* n(fact(- n 1))) * 3 * 2 *  1
     )
     )
    3
  )
  resp:6
  (
    (fn func[n]
      ()
    )
    1
  )
    ____________________________________________________________
     (
      (fn func[a b] 
        (+ a b)
     )
      3 5
     ) 
    ____________________________________________________________
      (
        (
          fn func[n]
          (
            if (= n 1)
            1
           (+ n (func(- n 1)))
          )           
        )
        3
      )
      devuelve 6
    ____________________________________________________________
     (
     (fn ([] 0)
     ([x] x)
     ([x y] (+ x y))
     ([x y & more] (+ x y (reduce + more)))
     ) 2 3 5 2) 
    ____________________________________________________________
    (
      (
        fn suma-lista [n]
        (reduce + lista)
      )
     [1 2]
    )

    ____________________________________________________________
    LISTAS

   (defn suma-lista [lista]
   (reduce + lista))

   (suma-lista [1 2 3 4 5])

   -------------------------------------------------------------

   (defn maximo-lista [lista]
   (reduce max lista))

   -------------------------------------------------------------

   ((fn [lista]
   (reduce + lista))
   [1 2])

   -------------------------------------------------------------

   (defn invertir-lista [lista]
   (reduce conj '() lista))

   ;; Ejemplo de uso:
   (invertir-lista [1 2 3 4 5]) ;; => (5 4 3 2 1)
 
   -------------------------------------------------------------

    (
      defn capicua2 [lista]
  (= lista (reverse lista))
  )

   -------------------------------------------------------------
   (defn filtrar-pares [lista]
  (filter even? lista))
  --------------------------------------------------------------
  (defn eliminar-duplicados [lista]
  (distinct lista))
  ---------------------------------------------------------------
(defn palindromo? [lista]
  (= lista (reverse lista)))
  --------------------------------------------------------------
  (defn contar-ocurrencias [lista] 
  (reduce (fn [cuentas elem]  
            (assoc cuentas elem (inc (get cuentas elem 0))))
          {}
          lista))


(defn contar-ocurrencias [lista]
  (reduce (fn [cuentas elem]
            (assoc cuentas elem (inc (get cuentas elem 0))))
          {}
          lista))
Paso a Paso
Inicialización:

lista: [1, 2, 1, 3, 2, 1]
cuentas: {} (inicialmente vacío)
elem: el primer elemento de la lista (1 en la primera iteración)
Primera Iteración:

elem: 1
cuentas: {}
get cuentas elem 0: busca el valor asociado a 1 en cuentas, devolviendo 0 porque no existe.
inc (get cuentas elem 0): inc 0, que resulta en 1.
assoc cuentas elem (inc (get cuentas elem 0)): añade 1 al mapa cuentas con el valor 1.
Resultado de cuentas: {1 1}
Segunda Iteración:

elem: 2
cuentas: {1 1}
get cuentas elem 0: busca el valor asociado a 2, devolviendo 0 porque no existe.
inc (get cuentas elem 0): inc 0, que resulta en 1.
assoc cuentas elem (inc (get cuentas elem 0)): añade 2 al mapa cuentas con el valor 1.
Resultado de cuentas: {1 1, 2 1}
Tercera Iteración:

elem: 1
cuentas: {1 1, 2 1}
get cuentas elem 0: busca el valor asociado a 1, devolviendo 1.
inc (get cuentas elem 0): inc 1, que resulta en 2.
assoc cuentas elem (inc (get cuentas elem 0)): actualiza 1 en el mapa cuentas con el valor 2.
Resultado de cuentas: {1 2, 2 1}
Cuarta Iteración:

elem: 3
cuentas: {1 2, 2 1}
get cuentas elem 0: busca el valor asociado a 3, devolviendo 0 porque no existe.
inc (get cuentas elem 0): inc 0, que resulta en 1.
assoc cuentas elem (inc (get cuentas elem 0)): añade 3 al mapa cuentas con el valor 1.
Resultado de cuentas: {1 2, 2 1, 3 1}
Quinta Iteración:

elem: 2
cuentas: {1 2, 2 1, 3 1}
get cuentas elem 0: busca el valor asociado a 2, devolviendo 1.
inc (get cuentas elem 0): inc 1, que resulta en 2.
assoc cuentas elem (inc (get cuentas elem 0)): actualiza 2 en el mapa cuentas con el valor 2.
Resultado de cuentas: {1 2, 2 2, 3 1}
Sexta Iteración:

elem: 1
cuentas: {1 2, 2 2, 3 1}
get cuentas elem 0: busca el valor asociado a 1, devolviendo 2.
inc (get cuentas elem 0): inc 2, que resulta en 3.
assoc cuentas elem (inc (get cuentas elem 0)): actualiza 1 en el mapa cuentas con el valor 3.
Resultado de cuentas: {1 3, 2 2, 3 1}
Resultado Final
Después de procesar toda la lista [1, 2, 1, 3, 2, 1], el mapa cuentas es {1 3, 2 2, 3 1}.

Resumen de cada iteración:
{} (inicial)
{1 1} (después del primer 1)
{1 1, 2 1} (después del 2)
{1 2, 2 1} (después del segundo 1)
{1 2, 2 1, 3 1} (después del 3)
{1 2, 2 2, 3 1} (después del segundo 2)
{1 3, 2 2, 3 1} (después del tercer 1)

 ---------------------------------------------------------------
 (get mapa clave default)
(get {"a" 1 "b" 2} "a" 0) ;; Devuelve 1
(get {"a" 1 "b" 2} "c" 0) ;; Devuelve 0 porque "c" no está en el mapa
---------------------------------------------------------------------
(inc 5) //6
------------------------------------------------------------------------
(assoc mapa clave valor)
(assoc {:a 1 :b 2} :c 3) ;; Devuelve {:a 1 :b 2 :c 3}
------------------------------------------------------------------------
(reduce f inicial colección)
(reduce + 0 [1 2 3]) ;; Devuelve 6 (suma todos los elementos de la lista)
------------------------------------------------------------------------

    ____________________________________________________________
(defn agrupar-por-paridad [lista]
  (reduce (fn [grupos elem]
            (let [clave (if (even? elem) :par :impar)]
              (update grupos clave conj elem)))
          {:par [] :impar []}
          lista))

;; Ejemplo de uso
(agrupar-por-paridad [1 2 3 4 5 6 7 8 9 10])
;; Resultado: {:par [2 4 6 8 10], :impar [1 3 5 7 9]}

PASO A PASO YO:

(defn agrupar-por-paridad [lista] [1 ,2 ,3 ,1,4]
  (reduce (fn [grupos elem] grupos:{ }  elem//1 
            (let [clave (if (even? elem) :par :impar)] clave:impar//
              (update grupos clave conj elem))) update {} clave{impar} conj{} elem
          {:par [] :impar []}
          lista))


PASO A PASO GPT:

Paso a paso con la lista [1 2 3 4 5 6 7 8 9 10]
Estado inicial del acumulador:

{:par [] :impar []}
Primer elemento: 1:

elem = 1
Determinamos la clave:

(if (even? 1) :par :impar)
;; Resultado: :impar
Actualizamos el acumulador:

(update {:par [] :impar []} :impar conj 1)
;; Resultado: {:par [] :impar [1]}
Segundo elemento: 2:

elem = 2
Determinamos la clave:
clojure
Copy code
(if (even? 2) :par :impar)
;; Resultado: :par
Actualizamos el acumulador:
clojure
Copy code
(update {:par [] :impar [1]} :par conj 2)
;; Resultado: {:par [2] :impar [1]}
Tercer elemento: 3:

elem = 3
Determinamos la clave:
clojure
Copy code
(if (even? 3) :par :impar)
;; Resultado: :impar
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2] :impar [1]} :impar conj 3)
;; Resultado: {:par [2] :impar [1 3]}
Cuarto elemento: 4:

elem = 4
Determinamos la clave:
clojure
Copy code
(if (even? 4) :par :impar)
;; Resultado: :par
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2] :impar [1 3]} :par conj 4)
;; Resultado: {:par [2 4] :impar [1 3]}
Quinto elemento: 5:

elem = 5
Determinamos la clave:
clojure
Copy code
(if (even? 5) :par :impar)
;; Resultado: :impar
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2 4] :impar [1 3]} :impar conj 5)
;; Resultado: {:par [2 4] :impar [1 3 5]}
Sexto elemento: 6:

elem = 6
Determinamos la clave:
clojure
Copy code
(if (even? 6) :par :impar)
;; Resultado: :par
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2 4] :impar [1 3 5]} :par conj 6)
;; Resultado: {:par [2 4 6] :impar [1 3 5]}
Séptimo elemento: 7:

elem = 7
Determinamos la clave:
clojure
Copy code
(if (even? 7) :par :impar)
;; Resultado: :impar
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2 4 6] :impar [1 3 5]} :impar conj 7)
;; Resultado: {:par [2 4 6] :impar [1 3 5 7]}
Octavo elemento: 8:

elem = 8
Determinamos la clave:
clojure
Copy code
(if (even? 8) :par :impar)
;; Resultado: :par
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2 4 6] :impar [1 3 5 7]} :par conj 8)
;; Resultado: {:par [2 4 6 8] :impar [1 3 5 7]}
Noveno elemento: 9:

elem = 9
Determinamos la clave:
clojure
Copy code
(if (even? 9) :par :impar)
;; Resultado: :impar
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2 4 6 8] :impar [1 3 5 7]} :impar conj 9)
;; Resultado: {:par [2 4 6 8] :impar [1 3 5 7 9]}
Décimo elemento: 10:

elem = 10
Determinamos la clave:
clojure
Copy code
(if (even? 10) :par :impar)
;; Resultado: :par
Actualizamos el acumulador:
clojure
Copy code
(update {:par [2 4 6 8] :impar [1 3 5 7 9]} :par conj 10)
;; Resultado: {:par [2 4 6 8 10] :impar [1 3 5 7 9]}
Resultado final
Después de iterar sobre todos los elementos de la lista [1 2 3 4 5 6 7 8 9 10], el acumulador final es:

clojure
Copy code
{:par [2 4 6 8 10], :impar [1 3 5 7 9]}
    ____________________________________________________________

    (defn sumar-valores [pares]
  (reduce (fn [acum [clave valor]]
            (update acum clave (fnil + 0) valor))
          {}
          pares))

;; Ejemplo de uso
(sumar-valores [[:a 1] [:b 2] [:a 3] [:b 4] [:c 5]])
;; Resultado: {:a 4, :b 6, :c 5}
    ____________________________________________________________

    (defn contar-longitud-palabras [palabras]
  (reduce (fn [cuentas palabra]
            (let [longitud (count palabra)]
              (update cuentas longitud (fnil inc 0))))
          {}
          palabras))

;; Ejemplo de uso
(contar-longitud-palabras ["hola" "adios" "hi" "chau" "hello"])
;; Resultado: {4 2, 5 1, 2 1}
    ____________________________________________________________

    (defn contar-pares [lista]
  (reduce (fn [contador elem]
            (if (even? elem)
              (inc contador)
              contador))
          0
          lista))

;; Ejemplo de uso
(contar-pares [1 2 3 4 5 6 7 8 9 10])
;; Resultado: 5
    ____________________________________________________________
    (defn maximo-minimo [lista]
  (reduce (fn [[maximo minimo] elem]
            [(max maximo elem) (min minimo elem)])
          [(first lista) (first lista)]
          (rest lista)))

;; Ejemplo de uso
(maximo-minimo [3 1 4 1 5 9 2 6 5 3 5])
;; Resultado: [9 1]
    ____________________________________________________________
    (defn revertir-lista [lista]
  (reduce (fn [acumulador elem]
            (cons elem acumulador))
          ()
          lista))

;; Ejemplo de uso
(revertir-lista [1 2 3 4 5])
;; Resultado: (5 4 3 2 1)
    ____________________________________________________________
    (list 1 2 3 4)
;; Resultado: (1 2 3 4)
    ____________________________________________________________
    (conj '(2 3 4) 1)
;; Resultado: (1 2 3 4)

(first '(1 2 3 4))
;; Resultado: 1

(rest '(1 2 3 4))
;; Resultado: (2 3 4)

(cons 1 '(2 3 4))
;; Resultado: (1 2 3 4)

(nth '(1 2 3 4) 2)
;; Resultado: 3

(map inc '(1 2 3 4))
;; Resultado: (2 3 4 5)

(filter even? '(1 2 3 4))
;; Resultado: (2 4)

(reduce + '(1 2 3 4))
;; Resultado: 10

(partition 2 '(1 2 3 4 5 6))
;; Resultado: ((1 2) (3 4) (5 6))

(flatten '(1 (2 3) ((4 5) 6)))
;; Resultado: (1 2 3 4 5 6)

(concat '(1 2) '(3 4) '(5 6))
;; Resultado: (1 2 3 4 5 6)

(take 3 '(1 2 3 4 5))
;; Resultado: (1 2 3)

(drop 3 '(1 2 3 4 5))
;; Resultado: (4 5)

(take-while #(< % 4) '(1 2 3 4 5))
;; Resultado: (1 2 3)

(drop-while #(< % 4) '(1 2 3 4 5))
;; Resultado: (4 5)

(split-at 3 '(1 2 3 4 5))
;; Resultado: [(1 2 3) (4 5)]

(repeat 3 1)
;; Resultado: (1 1 1)

(take 7 (cycle '(1 2 3)))
;; Resultado: (1 2 3 1 2 3 1)

(interleave '(1 2 3) '(4 5 6))
;; Resultado: (1 4 2 5 3 6)

(interpose :x '(1 2 3))
;; Resultado: (1 :x 2 :x 3)

(frequencies '(1 2 1 3 2 1))
;; Resultado: {1 3, 2 2, 3 1}

(distinct '(1 2 1 3 2 1))
;; Resultado: (1 2 3) 

(sort '(3 1 4 1 5 9 2 6))
;; Resultado: (1 1 2 3 4 5 6 9)

(sort-by #(Math/abs %) [3 -1 2 -4 5])
;; Resultado: (-1 2 3 -4 5)

(sort-by count ["banana" "apple" "orange" "pear"]) ;;ordena por longitud de cada palabra "pear" (4)
;; Resultado: ("pear" "apple" "orange" "banana")

(def personas [{:nombre "Alice", :edad 30}
               {:nombre "Bob", :edad 25}
               {:nombre "Charlie", :edad 35}])

(sort-by :edad personas)
;; Resultado: ({:nombre "Bob", :edad 25}
;;             {:nombre "Alice", :edad 30}
;;             {:nombre "Charlie", :edad 35})

(sort-by count [[1 2] [3 4 5] [6] [7 8 9 10]]) ;;ordena por longiutd de sublistas
;; Resultado: ([6] [1 2] [3 4 5] [7 8 9 10])


(reverse '(1 2 3 4 5))
;; Resultado: (5 4 3 2 1)

(zipmap [:a :b :c] [1 2 3])
;; Resultado: {:a 1, :b 2, :c 3}

(into [] '(1 2 3 4 5))
;; Resultado: [1 2 3 4 5]

(group-by #(mod % 3) [1 2 3 4 5 6 7 8 9])
;; Resultado: {1 [1 4 7], 2 [2 5 8], 0 [3 6 9]}


or ejemplo, en la división 
10
÷
2

El dividendo es 
10

El divisor es 
2
El cociente es 
5
 porque 
2
2 cabe en 
10 cinco veces.
No hay residuo en este caso porque la división es exacta. Si hubiera sido 
10
÷
3
, el cociente sería 
3
3 y el residuo sería 
1 ya que 
3 cabe en 
10 tres veces y sobra 
1
    ______________________________________________
    
    ______________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    ____________________________________________________________
    */


  return (
    <div>Tests</div>
  )
}

export default Tests